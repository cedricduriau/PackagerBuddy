#!/usr/bin/env python

# stdlib modules
from __future__ import absolute_import
import os
import argparse

# tool modules
from packagerbuddy import packagerbuddy


def _build_parser():
    """
    Builds the command line interface.

    :rtype: argparse.ArgumentParser
    """
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    # ========================================================================
    # install
    # ========================================================================
    help = "installs a software version"
    parser_install = subparsers.add_parser("install", help=help)
    parser_install.set_defaults(which="install")

    # required arguments
    req_args = parser_install.add_argument_group("required arguments")

    help = "name of the software to install"
    req_args.add_argument("-s", "--software", required=True, help=help)

    help = "version of the software to install"
    req_args.add_argument("-v", "--version", required=True, help=help)

    help = "force the install procedure again"
    parser_install.add_argument("-f", "--force", action="store_true", help=help)

    # ========================================================================
    # list
    # ========================================================================
    help = "shows all installed software versions"
    parser_list = subparsers.add_parser("list", help=help)
    parser_list.set_defaults(which="list")

    # ========================================================================
    # avail
    # ========================================================================
    help = "shows all available software packages to install"
    parser_avail = subparsers.add_parser("avail", help=help)
    parser_avail.set_defaults(which="avail")

    # ========================================================================
    # uninstall
    # ========================================================================
    help = "uninstall one or all versions of a software"
    parser_uninstall = subparsers.add_parser("uninstall", help=help)
    parser_uninstall.set_defaults(which="uninstall")

    # required arguments
    req_args = parser_uninstall.add_argument_group("required arguments")

    help = "name of the software to uninstall"
    req_args.add_argument("-s", "--software", required=True, help=help)

    # optional arguments
    help = "version of the version to uninstall"
    parser_uninstall.add_argument("-v", "--version", required=False, help=help)

    help = "perform a trial run with no changes made"
    parser_uninstall.add_argument("--dry-run", action="store_true", help=help)

    # ========================================================================
    # parser settings
    # ========================================================================
    # usage
    usages = []
    usages.append(parser_install.format_usage())
    usages.append(parser_list.format_usage())
    usages.append(parser_avail.format_usage())
    usages.append(parser_uninstall.format_usage())

    usage = os.path.basename(__file__) + " [COMMAND] [OPTIONS]\n"
    parser.usage = usage + "".join(usages)

    # description
    parser.description = """Config based software packager."""

    return parser


if __name__ == "__main__":
    parser = _build_parser()
    namespace = parser.parse_args()
    action = namespace.which

    if action == "install":
        packagerbuddy.install(namespace.software,
                              namespace.version,
                              force=namespace.force)
    elif action == "list":
        msg = "No installed software found."
        installed = packagerbuddy.get_installed_software()
        if installed:
            msg = "\n".join(["- " + i for i in installed])
        print(msg)
    elif action == "avail":
        msg = "No software configs available."
        configs = packagerbuddy.get_configs()
        if configs:
            names = map(packagerbuddy.get_software_from_config, configs)
            msg = "\n".join(["- " + i for i in names])
        print(msg)
    elif action == "uninstall":
        packagerbuddy.uninstall(namespace.software,
                                version=namespace.version,
                                dry_run=namespace.dry_run)
